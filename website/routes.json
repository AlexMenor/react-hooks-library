[
  {
    "name": "BreakPointHooks",
    "category": "browser",
    "route": "/core/BreakPointHooks",
    "description": "Reactive hooks and utilities to be used with user provided breakpoints."
  },
  {
    "name": "useActiveElement",
    "category": "browser",
    "route": "/core/useActiveElement",
    "description": "Reactive document.activeElement"
  },
  {
    "name": "useAsyncCallback",
    "category": "state",
    "route": "/core/useAsyncCallback",
    "description": "Returns a current execution state of an async function."
  },
  {
    "name": "useClickOutside",
    "category": "sensors",
    "route": "/core/useClickOutside",
    "description": "Listen for click outside an element, useful for modals and tooltips."
  },
  {
    "name": "useDebounce",
    "category": "utilities",
    "route": "/core/useDebounce",
    "description": "Used to debounce a quickly changing value. Will return the latest value after a specified amount of time."
  },
  {
    "name": "useEffectAfterMount",
    "category": "lifecycle",
    "route": "/core/useEffectAfterMount",
    "description": "A useEffect hook that does not run on mount, but only on subsequent updates"
  },
  {
    "name": "useEventListener",
    "category": "browser",
    "route": "/core/useEventListener",
    "description": "Register listener using addEventListener when mounting, and removeEventListener automatically when un-mounting."
  },
  {
    "name": "useFont",
    "category": "browser",
    "route": "/core/useFont",
    "description": "React FontFace, a hook to load fonts asynchronously"
  },
  {
    "name": "useHasMounted",
    "category": "state",
    "route": "/core/useHasMounted",
    "description": "Hook that returns whether or not the component has mounted"
  },
  {
    "name": "useHover",
    "category": "sensors",
    "route": "/core/useHover",
    "description": "Detect if a dom element is hovered"
  },
  {
    "name": "useIntersectionObserver",
    "category": "browser",
    "route": "/core/useIntersectionObserver",
    "description": "Reactive intersection observer."
  },
  {
    "name": "useInterval",
    "category": "state",
    "route": "/core/useInterval",
    "description": "Run a function repeatedly at a specified interval"
  },
  {
    "name": "useIsSupported",
    "category": "sensors",
    "route": "/core/useIsSupported",
    "description": "Is a feature supported in the browser or not"
  },
  {
    "name": "useKeyStroke",
    "category": "sensors",
    "route": "/core/useKeyStroke",
    "description": "Listen for keyboard keys on keystroke"
  },
  {
    "name": "useLocalStorage",
    "category": "state",
    "route": "/core/useLocalStorage",
    "description": "Modified `useState` hook that syncs with localStorage."
  },
  {
    "name": "useLocation",
    "category": "browser",
    "route": "/core/useLocation",
    "description": "Reactive browser location."
  },
  {
    "name": "useMediaQuery",
    "category": "browser",
    "route": "/core/useMediaQuery",
    "description": "Reactive media query hook that returns the truthy value of the media query."
  },
  {
    "name": "useMediaStream",
    "category": "sensors",
    "route": "/core/useMediaStream",
    "description": "Reactive `mediaDevices.getUserMedia` streaming"
  },
  {
    "name": "useMount",
    "category": "lifecycle",
    "route": "/core/useMount",
    "description": "Run a function when a component is mounted."
  },
  {
    "name": "useMountSync",
    "category": "lifecycle",
    "route": "/core/useMountSync",
    "description": "Run a function synchronously when a component is mounted but after DOM is painted."
  },
  {
    "name": "useMouse",
    "category": "sensors",
    "route": "/core/useMouse",
    "description": "Reactive mouse position based by page or client"
  },
  {
    "name": "useMutationObserver",
    "category": "browser",
    "route": "/core/useMutationObserver",
    "description": "Watch for changes being made to the DOM tree."
  },
  {
    "name": "useNetwork",
    "category": "sensors",
    "route": "/core/useNetwork",
    "description": "Reactive Network status"
  },
  {
    "name": "useOnline",
    "category": "sensors",
    "route": "/core/useOnline",
    "description": "Reactive online status"
  },
  {
    "name": "usePreferredColorScheme",
    "category": "browser",
    "route": "/core/usePreferredColorScheme",
    "description": "Reactive prefers color scheme."
  },
  {
    "name": "usePrevious",
    "category": "state",
    "route": "/core/usePrevious",
    "description": "Find previous value of a state"
  },
  {
    "name": "useScreenShare",
    "category": "sensors",
    "route": "/core/useScreenShare",
    "description": "Reactive screen sharing"
  },
  {
    "name": "useScroll",
    "category": "sensors",
    "route": "/core/useScroll",
    "description": "Reactive scroll values for a react ref or a dom node"
  },
  {
    "name": "useScrollIntoView",
    "category": "browser",
    "route": "/core/useScrollIntoView",
    "description": "A hook to scroll an element into view on mounting"
  },
  {
    "name": "useSessionStorage",
    "category": "state",
    "route": "/core/useSessionStorage",
    "description": "Modified `useState` hook that syncs with sessionStorage."
  },
  {
    "name": "useStateCompare",
    "category": "state",
    "route": "/core/useStateCompare",
    "description": "useState hook with custom compare function to avoid re-rendering"
  },
  {
    "name": "useStateHistory",
    "category": "state",
    "route": "/core/useStateHistory",
    "description": "useState with built in undo and redo history control"
  },
  {
    "name": "useTitle",
    "category": "browser",
    "route": "/core/useTitle",
    "description": "Reactive document title hook, set title or observe dom mutation reactively"
  },
  {
    "name": "useToggle",
    "category": "state",
    "route": "/core/useToggle",
    "description": "A state toggle hook"
  },
  {
    "name": "useUnMount",
    "category": "lifecycle",
    "route": "/core/useUnMount",
    "description": "Run a function when component is unmounted."
  },
  {
    "name": "useWindowSize",
    "category": "sensors",
    "route": "/core/useWindowSize",
    "description": "Reactive window size"
  },
  {
    "name": "utils",
    "category": "shared",
    "route": "/shared/utils",
    "description": "Common utils and helpers."
  }
]